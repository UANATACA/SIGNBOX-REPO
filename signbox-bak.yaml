swagger: '2.0'
info:
  version: '1.0'
  title: UANATACA SIGNBOX API DOCUMENTATION
  x-logo:
      url: https://i.ibb.co/5BgF3fR/logo-signbox-redoc.png
      altText: Signbox logo
  description:
    $ref: ./signbox_gui.md

host: signbox.developers.uanataca.com
schemes: 
  - https

tags:
- name: "API Reference"
  description: "
  <html>
  <table>
    <tr>
      <th>Method</th><th>Endpoint</th><th>Action</th>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1echo/get' style='color:#E20D1B;'>/api/echo</a></td><td>Replies back what receives.</td>
    </tr>
    <tr>
      <td>POST</td><td><a href='#tag/API-Reference/paths/~1api~1sign/post' style='color:#E20D1B;'>/api/sign</a></td><td>Signs a local or a remote hosted file.</td>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1job~1{id}/get' style='color:#E20D1B;'>/api/job/{id}</a></td><td>Gets the state of a job by its id.</td>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1result~1{id}/get' style='color:#E20D1B;'>/api/result/{id}</a></td><td>Gets the result of a job</td>
    </tr>
    <tr>
      <td>POST</td><td><a href='#tag/API-Reference/paths/~1api~1generate_otp/post' style='color:#E20D1B;'>/api/generate_otp</a></td><td>Gets the result of a job</td>
    </tr>
  </table> 
  </br> 
  </html>"

paths:
  /api/echo:
    get: 
      summary: ECHO
      tags:
        - API Reference
      description: Replies back what it receives.
      produces:
        - text/plain
      parameters:
        - in: query
          name: message
          description: The message to be replied back
          type: string 
          required: true
      responses:
        200:
          description: The sign request was executed
          schema:
            type: object
            properties:
              message:
                type: string
                description: "The message set as a query parameter. Example: **HelloWorld**"
          examples:
            text/plain:
              "HelloWorld"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/echo?message=HelloWorld'
        - lang: 'JavaScript'
          source: |
                  const query = new URLSearchParams({message: 'HelloWorld'}).toString();

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/echo?' + query,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/echo"

                  query = {
                    "message": "HelloWorld"
                  }

                  response = requests.get(url, params=query)

                  data = response.json()
                  print(data)                  
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const query = new URLSearchParams({message: 'HelloWorld'}).toString();

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/echo?' + query,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/echo?message=HelloWorld");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
  #############
  /api/sign:
    post:
      summary: SIGN
      tags:
        - API Reference
      description: Signs a local or a remote hosted file.
      produces:
        - text/plain
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file_in
          type: file
          description: "The location of the document for signing. *Please read:*\n
                        - **USE ONLY FILE TYPE (not binary or base64 strings)**\n
                        - If this parameter is specified, **leave `url_in` blank!!!**"
        - in: formData
          name: url_in
          type: string
          description: "Url where to find the document to sign. *Please read:* \n
                        - If this parameter is specified, **leave `file_in` blank!!!**"     
        - in: formData
          name: url_out
          type: string
          description: "Url where to send the signed document for downloading. *Please read:* \n
                        - If this parameter is specified, **the RESULT call MUST NOT be executed!!!**"
        - in: formData
          name: urlback
          type: string
          description: "Url where to send signing process report"
        - in: formData
          name: env
          type: string
          enum: [prod, test, sac]
          description: Reference environment
          required: true
        - in: formData
          name: format
          type: string
          enum: [pades, cades, xades]
          description: "Types of supported files: \n
                        - **pades** for PDF files \n
                        - **xades** for XML files \n
                        - **cades** for other files"
          required: true
        - in: formData
          name: username
          type: string
          description: Digital identity username
          required: true
        - in: formData
          name: password
          type: string
          description: Digital identity password
          required: true
        - in: formData
          name: pin
          type: string
          description: Digital identity pin
          required: true
        - in: formData
          name: level
          type: string
          description: "Specify the level of the signature. The allowed values are: \n
                        - BES, T, LTV for pades \n
                        - BES, T, EPES for cades \n
                        - BES, T, EPES, XL for xades"
        - in: formData
          name: tsa_bookmark
          type: string
          description: Signature image alias name
        - in: formData
          name: billing_username
          type: string
          description: Billing account username          
          required: true
        - in: formData
          name: billing_password
          type: string
          description: Billing account password
          required: true
        - in: formData
          name: img_bookmark
          type: string
          description: Timestamp signature alias name
        - in: formData
          name: reason
          type: string
          description: Comments about the signature
        - in: formData
          name: location
          type: string
          description: Assigned location for the signature
        - in: formData
          name: npage
          type: string
          description: "Page number where the signature image is placed. Please read: \n
                        - If this parameter is not specified, the first page is selected by default (0)"
        - in: formData
          name: otp
          type: string
          description: The OTP code previously sent to the user
      responses:
        200:
          description: The sign request was executed
          schema:
            type: object
            properties:
              id:
                type: string
                description: "The job Id. **This does not necessarily mean the signature was successfully applied!!**"
          examples:
            text/plain:
              "id=14.1"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    'https://signbox.developers.uanataca.com/api/sign' \
                    -H 'Content-Type: multipart/form-data' \
                    -F file_in=@Sample_folder/Originals/original_doc.pdf \
                    -F url_in=http://uanataca.samplepage.com/original_doc.pdf \
                    -F url_out=https://uanataca.samplepage.com/signed_doc.pdf \
                    -F urlback=https://uanataca.samplepage.com/report.pdf \
                    -F env=test \
                    -F format=pades \
                    -F username=5053759 \
                    -F password=7T8xdGBN \
                    -F pin=belorado74 \
                    -F level=T \
                    -F tsa_bookmark=uanataca \
                    -F billing_username=billing_user@uanataca.com \
                    -F billing_password=z5qNqkfB \
                    -F img_bookmark=uanataca \
                    -F 'reason=Signature test' \
                    -F 'location=Barcelona, Spain' \
                    -F 'npage': '2' \
                    -F 'otp': '123123'
        - lang: 'Javascript'
          source: |
                  var formdata = new FormData();
                  formdata.append("file_in", fileInput.files[0], "Sample_folder/Originals/original_doc.pdf");
                  formdata.append("url_in", "http://uanataca.samplepage.com/original_doc.pdf");
                  formdata.append("url_out", "https://uanataca.samplepage.com/signed_doc.pdf");
                  formdata.append("urlback", "https://uanataca.samplepage.com/report.pdf");
                  formdata.append("env", "test");
                  formdata.append("format", "pades");
                  formdata.append("username", "5053759");
                  formdata.append("password", "7T8xdGBN");
                  formdata.append("pin", "belorado74");
                  formdata.append("level", "T");
                  formdata.append("tsa_bookmark", "uanataca");
                  formdata.append("billing_username", "billing_user@uanataca.com");
                  formdata.append("billing_password", "z5qNqkfB");
                  formdata.append("img_bookmark", "uanataca");
                  formdata.append("reason", "Signature test");
                  formdata.append("location", "Barcelona, Spain");
                  formdata.append("npage", "2");
                  formdata.append("otp", "123123");

                  var requestOptions = {
                    method: 'POST',
                    headers: myHeaders,
                    body: formdata,
                    redirect: 'follow'
                  };

                  fetch("https://signbox.developers.uanataca.com/api/sign", requestOptions)
                    .then(response => response.text())
                    .then(result => console.log(result))
                    .catch(error => console.log('error', error));
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/sign"

                  payload={'url_in': 'http://uanataca.samplepage.com/original_doc.pdf',
                  'url_out': 'https://uanataca.samplepage.com/signed_doc.pdf',
                  'urlback': 'https://uanataca.samplepage.com/report.pdf',
                  'env': 'test',
                  'format': 'pades',
                  'username': '5053759',
                  'password': '7T8xdGBN',
                  'pin': 'belorado74',
                  'level': 'T',
                  'tsa_bookmark': 'uanataca',
                  'billing_username': 'billing_user@uanataca.com',
                  'billing_password': 'z5qNqkfB',
                  'img_bookmark': 'uanataca',
                  'reason': 'Signature test',
                  'location': 'Barcelona, Spain',
                  'npage': '2',
                  'otp': '123123'}
                  files=[
                    ('file_in',('Doc1.pdf',open('Sample_folder/Originals/original_doc.pdf','rb'),'application/pdf'))
                  ]
                  
                  headers = {"Content-Type": "multipart/form-data"}

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  const fs = require('fs');
                  const FormData = require('form-data');
                  const fetch = require('node-fetch');
                  const formData = new FormData();

                  formData.append('file_in', fs.createReadStream('Sample_folder/Originals/original_doc.pdf'));
                  formData.append('url_in', 'http://uanataca.samplepage.com/original_doc.pdf');
                  formData.append('url_out', 'https://uanataca.samplepage.com/signed_doc.pdf');
                  formData.append('urlback', 'https://uanataca.samplepage.com/report.pdf');
                  formData.append('env', 'test');
                  formData.append('format', 'pades');
                  formData.append('username', '5053759');
                  formData.append('password', '7T8xdGBN');
                  formData.append('pin', 'belorado74');
                  formData.append('level', 'T');
                  formData.append('tsa_bookmark', 'uanataca');
                  formData.append('billing_username', 'billing_user@uanataca.com');
                  formData.append('billing_password', 'z5qNqkfB');
                  formData.append('img_bookmark', 'uanataca');
                  formData.append('reason', 'Signature test');
                  formData.append('location', 'Barcelona, Spain');
                  formData.append('npage', '2');
                  formData.append('otp', '123123');

                  const url = 'https://signbox.developers.uanataca.com/api/sign';

                  const options = {
                    method: 'POST',
                    headers: {
                      Accept: 'text/plain',
                      'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'
                    }
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  var client = new RestClient("https://signbox.developers.uanataca.com/api/sign");
                  client.Timeout = -1;
                  var request = new RestRequest(Method.POST);
                  request.AddHeader("content-type", "multipart/form-data; boundary=----011000010111000001101001");
                  request.AddFile("file_in", "Sample_folder/Originals/original_doc.pdf");
                  request.AddParameter("url_in", "http://uanataca.samplepage.com/original.pdf");
                  request.AddParameter("url_out", "https://uanataca.samplepage.com/signed.pdf");
                  request.AddParameter("urlback", "https://uanataca.samplepage.com/report.pdf");
                  request.AddParameter("env", "test");
                  request.AddParameter("format", "pades");
                  request.AddParameter("username", "5053759");
                  request.AddParameter("password", "7T8xdGBN");
                  request.AddParameter("pin", "belorado74");
                  request.AddParameter("level", "T");
                  request.AddParameter("tsa_bookmark", "uanataca");
                  request.AddParameter("billing_username", "billing_user@uanataca.com");
                  request.AddParameter("billing_password", "z5qNqkfB");
                  request.AddParameter("img_bookmark", "uanataca");
                  request.AddParameter("reason", "Signature test");
                  request.AddParameter("location", "Barcelona, Spain");
                  request.AddParameter("npage", "2");
                  request.AddParameter("otp", "123123");

                  IRestResponse response = client.Execute(request);
                  Console.WriteLine(response.Content);
#############
  /api/job/{id}:
    get: 
      summary: JOB
      tags:
        - API Reference
      description: Gets the state of a job by its id.
      produces:
        - text/plain
      parameters:
      - in: path
        name: id
        type: string 
        description: "The job id generated in the **sign** call"
        required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              state:
                type: string
                enum: [done, failed, pending]
                description: "The signature condition status"
              type:
                type: string
                description: "The process action type"
                default: sign
              detail:
                type: string
                description: "The status message"
          examples:
            text/plain:
              "state=done&type=sign"  
        502:
          description: "Bad Gateway. Incorrect job `id`"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/job/14.1'
        - lang: 'JavaScript'
          source: |
                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/job/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/job/14.1"

                  response = requests.get(url)

                  data = response.json()
                  print(data)                 
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/job/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/job/14.1");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/result/{id}:
    get: 
      summary: RESULT
      tags:
        - API Reference
      description: Returns the result of a job.
      produces:
        - application/pdf
      parameters:
      - in: path
        name: id
        type: string 
        required: true
      responses:
        200:
          description: Successful Response
          examples:
            text/plain:
                " %PDF-1.7\n
                  %����\n
                  1 0 obj\n
                  <</Type/Catalog/Pages 2 0 R/Lang(es-ES) /StructTreeRoot 10 0 R/MarkInfo<</Marked true>>/Metadata 26 0 R/ViewerPreferences 27 0 R>>\n
                  endobj\n\n

                  2 0 obj\n
                  <</Type/Pages/Count 1/Kids[ 3 0 R] >>\n
                  endobj\n\n

                  3 0 obj\n
                  <</Type/Page/Parent 2 0 R/Resources<</Font<</F1 5 0 R>>/ExtGState<</GS7 7 0 R/GS8 8 0 R>>/ProcSet[/PDF/Text/ImageB/ImageC/ImageI] >>/MediaBox[ 0 0 595.32 841.92] /Contents 4 0 R/Group<</Type/Group/S/Transparency/CS/DeviceRGB>>/Tabs/S/StructParents 0>>\n
                  endobj\n
                  (...)\n
                "
        502:
          description: "Bad Gateway. Incorrect job `id` or failed signature."
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/result/14.1'
        - lang: 'JavaScript'
          source: |
                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/result/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/result/14.1"

                  response = requests.get(url)

                  data = response.json()
                  print(data)                 
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/result/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/result/14.1");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/generate_otp:
    post: 
      summary: OTP
      tags:
        - API Reference
      description: Generates a new otp for the specified remote identity.
      produces:
        - text/plain
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: username
        type: string
        description: Digital identity username
        required: true
      - in: formData
        name: password
        description: Digital identity password
        type: string
        required: true
      - in: formData
        name: uses
        description: Number of uses for the generated otp
        type: number
        required: true
      - in: formData
        name: env
        description: The reference environment
        type: string
        enum: [prod, test, sac]     
        required: true
      responses:
        200:
          description: Successful Response
          examples:
            text/plain:
              "generated"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    'https://signbox.developers.uanataca.com/api/generate_otp' \
                    -H 'Content-Type: multipart/form-data' \
                    -F env=prod \
                    -F password=7T8xdGBN \
                    -F username=5053759 \
                    -F uses=10
        - lang: 'JavaScript'
          source: |
                  const form = new FormData();
                  form.append("env", "prod");
                  form.append("password", "7T8xdGBN");
                  form.append("username", "5053759");
                  form.append("uses", "10");

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/generate_otp',
                    {
                      method: 'POST',
                      headers: {},
                      body: form
                    }
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/generate_otp"

                  payload={'username': '5053210',
                  'password': '6rNA6kMw'}
                  files=[

                  ]
                  headers = {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)               
        - lang: 'Node.js'
          source: |
                  const FormData = require('form-data');
                  const fetch = require('node-fetch');

                  const form = new FormData();
                  form.append('env','prod');
                  form.append('password','7T8xdGBN');
                  form.append('username','5053759');
                  form.append('uses','10');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/generate_otp',
                    {
                      method: 'POST',
                      headers: {},
                      body: form
                    }
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {

                        MultipartFormDataContent postData = new MultipartFormDataContent();
                        postData.Add(new StringContent("prod"), "env");
                        postData.Add(new StringContent("7T8xdGBN"), "password");
                        postData.Add(new StringContent("5053759"), "username");
                        postData.Add(new StringContent("10"), "uses");
                        var request = await client.PostAsync("https://signbox.developers.uanataca.com/api/generate_otp", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
