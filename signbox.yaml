swagger: '2.0'
info:
  version: '1.0'
  title: UANATACA SIGNBOX API DOCUMENTATION
  x-logo:
      url: https://i.ibb.co/5BgF3fR/logo-signbox-redoc.png
      altText: Signbox logo
  description:
    $ref: ./signbox_gui.md

host: signbox.developers.uanataca.com
schemes: 
  - https

tags:
- name: "API Reference"
  description: "
  <html>
  <table>
    <tr>
      <th>Method</th><th>Endpoint</th><th>Action</th>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1echo/get'>/api/echo</a></td><td>Checks service availability</td>
    </tr>
    <tr>
      <td>POST</td><td><a href='#tag/API-Reference/paths/~1api~1sign/post'>/api/sign</a></td><td>Signs a local or a remote hosted file</td>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1job~1{id}/get'>/api/job/{id}</a></td><td>Gets the state of a job</td>
    </tr>
    <tr>
      <td>GET</td><td><a href='#tag/API-Reference/paths/~1api~1result~1{id}/get'>/api/result/{id}</a></td><td>Gets the signed file</td>
    </tr>
    <tr>
      <td>POST</td><td><a href='#tag/API-Reference/paths/~1api~1generate_otp/post'>/api/generate_otp</a></td><td>Send an otp code by sms to the signer</td>
    </tr>
  </table> 
  </br> 
  </html>"

paths:
  /api/echo:
    get: 
      summary: ECHO
      tags:
        - API Reference
      description: Replies back what it receives to check the service availability.
      produces:
        - text/plain
      parameters:
        - in: query
          name: message
          description: The message to be replied back
          type: string 
          required: true
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
                description: "The message set as a query parameter"
          examples:
            text/plain:
              "HelloWorld"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/echo?message=HelloWorld'
        - lang: 'JavaScript'
          source: |
                  const query = new URLSearchParams({message: 'HelloWorld'}).toString();

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/echo?' + query,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/echo"

                  query = {
                    "message": "HelloWorld"
                  }

                  response = requests.get(url, params=query)

                  data = response.json()
                  print(data)                  
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const query = new URLSearchParams({message: 'HelloWorld'}).toString();

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/echo?' + query,
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/echo?message=HelloWorld");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
  #############
  /api/sign:
    post:
      summary: SIGN
      tags:
        - API Reference
      description: Signs a local or a remote hosted file.
      produces:
        - text/plain
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file_in
          type: file
          description: "Local path of the file to be signed.\n
                        - **File type in base64 is not accpeted**\n
                        - If this parameter is specified, **leave `url_in` blank**"
        - in: formData
          name: url_in
          type: string
          description: "Url where to get the document to be signed.\n
                        - If this parameter is specified, **leave `file_in` blank**"     
        - in: formData
          name: url_out
          type: string
          description: "Url where to send signed file. See sample code in <a href='#section/Configuration/Url-out'>Url out configuration</a>"
          required: true
        - in: formData
          name: urlback
          type: string
          description: "Url where to send signing process log. See sample code in <a href='#section/Configuration/Url-back'>Url back configuration</a>"
          required: true
        - in: formData
          name: env
          type: string
          enum: [prod, test]
          description: Reference environment for testing or production
          required: true
        - in: formData
          name: format
          type: string
          enum: [pades, xades, cades]
          default: pades
          description: "Types of supported files: \n
                        - **pades** for PDF files \n
                        - **xades** for XML files \n
                        - **cades** for other files"
        - in: formData
          name: username
          type: string
          description: Digital identity username
          required: true
        - in: formData
          name: password
          type: string
          description: Digital identity password
          required: true
        - in: formData
          name: pin
          type: string
          description: Digital identity PIN
          required: true
        - in: formData
          name: level
          type: string
          default: BES
          description: "Specify the level of the signature. The allowed values are: \n
                        - `BES`, `T`, `LTV` for pades\n
                        - `BES`, `T`, `EPES`, `XL` for xades\n
                        - `BES`, `T`, `EPES` for cades"
        - in: formData
          name: tsa_bookmark
          type: string
          description: Timestamp service alias name. This field is required for signatures with levels T, LTV or XL
        - in: formData
          name: billing_username
          type: string
          description: Billing account username          
          required: true
        - in: formData
          name: billing_password
          type: string
          description: Billing account password
          required: true
        - in: formData
          name: img_bookmark
          type: string
          description: "Signature image alias name.<br>
                        It is required to previous create an image template. See <HTML><a href='#section/Configuration/Signature-Image-Configuration'>Image Configuration</a></HTML>"
        - in: formData
          name: reason
          type: string
          description: Reason about the signature
        - in: formData
          name: location
          type: string
          description: Geographic location about the signature
        - in: formData
          name: npage
          type: string
          default: 0
          description: "Page number where the image signature is placed.\n
                        - It is required an `img_bookmark` alias"
        - in: formData
          name: otp
          type: string
          description: "The OTP code previously sent to the user.\n
                        This parameter is only required and available for specific digital identities"
      responses:
        200:
          description: The sign request was executed
          schema:
            type: object
            properties:
              id:
                type: string
                description: "The signature job id"
          examples:
            text/plain:
              "id=14.1"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    'https://signbox.developers.uanataca.com/api/sign' \
                    -H 'Content-Type: multipart/form-data' \
                    -F file_in=@sample_folder/document.pdf \
                    -F url_in=http://example.com/document.pdf \
                    -F url_out=https://example.com/result \
                    -F urlback=https://example.com/log \
                    -F env=test \
                    -F format=pades \
                    -F username=1122338 \
                    -F password=7T8xdGBN \
                    -F pin=w98nZZDR \
                    -F level=T \
                    -F tsa_bookmark=uanataca \
                    -F billing_username=billing_user@domain \
                    -F billing_password=z5qNqkfB \
                    -F img_bookmark=uanataca \
                    -F 'reason=Signature test' \
                    -F 'location=Barcelona, Spain' \
                    -F 'npage': '2' \
                    -F 'otp': '123123'
        - lang: 'Javascript'
          source: |
                  var formdata = new FormData();
                  formdata.append("file_in", fileInput.files[0], "sample_folder/document.pdf");
                  formdata.append("url_in", "http://example.com/document.pdf");
                  formdata.append("url_out", "https://example.com/result");
                  formdata.append("urlback", "https://example.com/log");
                  formdata.append("env", "test");
                  formdata.append("format", "pades");
                  formdata.append("username", "1122338");
                  formdata.append("password", "7T8xdGBN");
                  formdata.append("pin", "w98nZZDR");
                  formdata.append("level", "T");
                  formdata.append("tsa_bookmark", "uanataca");
                  formdata.append("billing_username", "billing_user@domain");
                  formdata.append("billing_password", "z5qNqkfB");
                  formdata.append("img_bookmark", "uanataca");
                  formdata.append("reason", "Signature test");
                  formdata.append("location", "Barcelona, Spain");
                  formdata.append("npage", "2");
                  formdata.append("otp", "123123");

                  var requestOptions = {
                    method: 'POST',
                    headers: myHeaders,
                    body: formdata,
                    redirect: 'follow'
                  };

                  fetch("https://signbox.developers.uanataca.com/api/sign", requestOptions)
                    .then(response => response.text())
                    .then(result => console.log(result))
                    .catch(error => console.log('error', error));
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/sign"

                  payload={'url_in': 'http://example.com/document.pdf',
                  'url_out': 'https://example.com/result',
                  'urlback': 'https://example.com/log',
                  'env': 'test',
                  'format': 'pades',
                  'username': '1122338',
                  'password': '7T8xdGBN',
                  'pin': 'w98nZZDR',
                  'level': 'T',
                  'tsa_bookmark': 'uanataca',
                  'billing_username': 'billing_user@domain',
                  'billing_password': 'z5qNqkfB',
                  'img_bookmark': 'uanataca',
                  'reason': 'Signature test',
                  'location': 'Barcelona, Spain',
                  'npage': '2',
                  'otp': '123123'}
                  files=[
                    ('file_in',('Doc1.pdf',open('sample_folder/document.pdf','rb'),'application/pdf'))
                  ]
                  
                  headers = {"Content-Type": "multipart/form-data"}

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)
        - lang: 'Node.js'
          source: |
                  const fs = require('fs');
                  const FormData = require('form-data');
                  const fetch = require('node-fetch');
                  const formData = new FormData();

                  formData.append('file_in', fs.createReadStream('sample_folder/document.pdf'));
                  formData.append('url_in', 'http://example.com/document.pdf');
                  formData.append('url_out', 'https://example.com/result');
                  formData.append('urlback', 'https://example.com/log');
                  formData.append('env', 'test');
                  formData.append('format', 'pades');
                  formData.append('username', '1122338');
                  formData.append('password', '7T8xdGBN');
                  formData.append('pin', 'w98nZZDR');
                  formData.append('level', 'T');
                  formData.append('tsa_bookmark', 'uanataca');
                  formData.append('billing_username', 'billing_user@domain');
                  formData.append('billing_password', 'z5qNqkfB');
                  formData.append('img_bookmark', 'uanataca');
                  formData.append('reason', 'Signature test');
                  formData.append('location', 'Barcelona, Spain');
                  formData.append('npage', '2');
                  formData.append('otp', '123123');

                  const url = 'https://signbox.developers.uanataca.com/api/sign';

                  const options = {
                    method: 'POST',
                    headers: {
                      Accept: 'text/plain',
                      'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'
                    }
                  };

                  options.body = formData;

                  fetch(url, options)
                    .then(res => res.json())
                    .then(json => console.log(json))
                    .catch(err => console.error('error:' + err));
        - lang: 'C#'
          source: |
                  var client = new RestClient("https://signbox.developers.uanataca.com/api/sign");
                  client.Timeout = -1;
                  var request = new RestRequest(Method.POST);
                  request.AddHeader("content-type", "multipart/form-data; boundary=----011000010111000001101001");
                  request.AddFile("file_in", "sample_folder/document.pdf");
                  request.AddParameter("url_in", "http://uanataca.samplepage.com/original.pdf");
                  request.AddParameter("url_out", "https://uanataca.samplepage.com/signed.pdf");
                  request.AddParameter("urlback", "https://example.com/log");
                  request.AddParameter("env", "test");
                  request.AddParameter("format", "pades");
                  request.AddParameter("username", "1122338");
                  request.AddParameter("password", "7T8xdGBN");
                  request.AddParameter("pin", "w98nZZDR");
                  request.AddParameter("level", "T");
                  request.AddParameter("tsa_bookmark", "uanataca");
                  request.AddParameter("billing_username", "billing_user@domain");
                  request.AddParameter("billing_password", "z5qNqkfB");
                  request.AddParameter("img_bookmark", "uanataca");
                  request.AddParameter("reason", "Signature test");
                  request.AddParameter("location", "Barcelona, Spain");
                  request.AddParameter("npage", "2");
                  request.AddParameter("otp", "123123");

                  IRestResponse response = client.Execute(request);
                  Console.WriteLine(response.Content);
#############
  /api/job/{id}:
    get: 
      summary: JOB
      tags:
        - API Reference
      description: "Gets the state of a signature request by its job id.</br>
                    <html><blockquote style='background-color:#faf3ac; border-color:#DFDFDF; color:#3b3b3b;'><b>⚠This method is only used for testing purpose. In a production environment is required to use `urlback` service.</b></blockquote></html>"
      produces:
        - text/plain
      parameters:
      - in: path
        name: id
        type: string 
        description: "The job id got in a **sign** response"
        required: true
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              state:
                type: string
                enum: [done, failed, pending]
                description: "The signature condition status"
              type:
                type: string
                description: "The process action type"
                default: sign
              detail:
                type: string
                description: "The description for a failed process"
          examples:
            text/plain:
              "state=done&type=sign"  
        502:
          description: "Bad Gateway. Incorrect job `id`"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/job/14.1'
        - lang: 'JavaScript'
          source: |
                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/job/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/job/14.1"

                  response = requests.get(url)

                  data = response.json()
                  print(data)                 
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/job/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/job/14.1");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/result/{id}:
    get: 
      summary: RESULT
      tags:
        - API Reference
      description: "Returns the signed file of a signature request by its job id.</br>
                    ⚠ **This method is only used for testing purpose. In a production environment is required to use `url_out` service**</br>
                    The signed file is only available if `url_out` is not specified in **sign** call"
      produces:
        - application/pdf
      parameters:
      - in: path
        name: id
        type: string 
        description: "The job id got in a **sign** response"        
        required: true
      responses:
        200:
          description: Successful Response
          examples:
            text/plain:
                " %PDF-1.7\n
                  %����\n
                  1 0 obj\n
                  <</Type/Catalog/Pages 2 0 R/Lang(es-ES) /StructTreeRoot 10 0 R/MarkInfo<</Marked true>>/Metadata 26 0 R/ViewerPreferences 27 0 R>>\n
                  endobj\n\n

                  2 0 obj\n
                  <</Type/Pages/Count 1/Kids[ 3 0 R] >>\n
                  endobj\n\n

                  3 0 obj\n
                  <</Type/Page/Parent 2 0 R/Resources<</Font<</F1 5 0 R>>/ExtGState<</GS7 7 0 R/GS8 8 0 R>>/ProcSet[/PDF/Text/ImageB/ImageC/ImageI] >>/MediaBox[ 0 0 595.32 841.92] /Contents 4 0 R/Group<</Type/Group/S/Transparency/CS/DeviceRGB>>/Tabs/S/StructParents 0>>\n
                  endobj\n
                  (...)\n
                "
        502:
          description: "Bad Gateway. Incorrect job `id` or failed signature."
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X GET 'https://signbox.developers.uanataca.com/api/result/14.1'
        - lang: 'JavaScript'
          source: |
                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/result/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/result/14.1"

                  response = requests.get(url)

                  data = response.json()
                  print(data)                 
        - lang: 'Node.js'
          source: |
                  const fetch = require('node-fetch');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/result/14.1',
                    {method: 'GET'}
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {
                        var request = await client.GetAsync("https://signbox.developers.uanataca.com/api/result/14.1");
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
#############
  /api/generate_otp:
    post: 
      summary: OTP
      tags:
        - API Reference
      description: Generates an otp for the specified digital identity.</br>
                    ⚠ **This method is only required and available for specific digital identities"
      produces:
        - text/plain
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: username
        type: string
        description: Digital identity username
        required: true
      - in: formData
        name: password
        description: Digital identity password
        type: string
        required: true
      - in: formData
        name: uses
        description: Amount of uses for the generated otp
        type: number
        required: true
      - in: formData
        name: env
        description: Reference environment for testing or production
        type: string
        enum: [prod, test]     
        required: true
      responses:
        200:
          description: Successful Response
          examples:
            text/plain:
              "generated"
      x-codeSamples:
        - lang: 'curl'
          source: |
                  curl -i -X POST \
                    'https://signbox.developers.uanataca.com/api/generate_otp' \
                    -H 'Content-Type: multipart/form-data' \
                    -F env=prod \
                    -F password=7T8xdGBN \
                    -F username=1122338 \
                    -F uses=10
        - lang: 'JavaScript'
          source: |
                  const form = new FormData();
                  form.append("env", "prod");
                  form.append("username", "1122338");
                  form.append("password", "7T8xdGBN");
                  form.append("uses", "10");

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/generate_otp',
                    {
                      method: 'POST',
                      headers: {},
                      body: form
                    }
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'Python'
          source: |
                  import requests

                  url = "https://signbox.developers.uanataca.com/api/generate_otp"

                  payload={'username': '1122338',
                  'password': '7T8xdGBN'}
                  files=[

                  ]
                  headers = {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }

                  response = requests.request("POST", url, headers=headers, data=payload, files=files)

                  print(response.text)               
        - lang: 'Node.js'
          source: |
                  const FormData = require('form-data');
                  const fetch = require('node-fetch');

                  const form = new FormData();
                  form.append('env','prod');
                  form.append('username','1122338');
                  form.append('password','7T8xdGBN');
                  form.append('uses','10');

                  const resp = await fetch(
                    'https://signbox.developers.uanataca.com/api/generate_otp',
                    {
                      method: 'POST',
                      headers: {},
                      body: form
                    }
                  );

                  const data = await resp.text();
                  console.log(data);
        - lang: 'C#'
          source: |
                  using System;
                  using System.Net.Http;
                  using System.Threading.Tasks;

                  public class Program
                  {
                    public static async Task Main(string[] args)
                    {
                      using (var client = new HttpClient())
                      {

                        MultipartFormDataContent postData = new MultipartFormDataContent();
                        postData.Add(new StringContent("prod"), "env");
                        postData.Add(new StringContent("1122338"), "username");
                        postData.Add(new StringContent("7T8xdGBN"), "password");
                        postData.Add(new StringContent("10"), "uses");
                        var request = await client.PostAsync("https://signbox.developers.uanataca.com/api/generate_otp", postData);
                        var response = await request.Content.ReadAsStringAsync();

                        Console.WriteLine(response);
                      }
                    }
                  }
